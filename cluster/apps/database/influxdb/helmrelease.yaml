---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: influxdb
  namespace: database
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://charts.bitnami.com/bitnami
      chart: influxdb
      version: 4.12.0
      sourceRef:
        kind: HelmRepository
        name: influxdata-charts
        namespace: flux-system
      interval: 5m
  install:
    timeout: 10m
    remediation:
      retries: 3
  upgrade:
    timeout: 10m
    remediation:
      retries: 3
      remediateLastFailure: true
    cleanupOnFail: true
  rollback:
    timeout: 10m
    recreate: true
    cleanupOnFail: true
  values:
    global:
      imageRegistry: ""
      imagePullSecrets: []
      storageClass: "longhorn"
    diagnosticMode:
      enabled: false
      command:
        - sleep
      args:
        - infinity
    image:
      registry: docker.io
      repository: bitnami/influxdb
      tag: 2.4.0-debian-11-r11
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      debug: false

    auth:
      enabled: true
      ## @param auth.usePasswordFiles Whether to use files to provide secrets instead of env vars.
      ##
      usePasswordFiles: false
      admin:
        username: ${INFLUXDB_USER}
        password: ${INFLUXDB_PASS}
        token: ${INFLUXDB_TOKEN}
        org: primary
        bucket: primary
    influxdb:
      replicaCount: 1
      podManagementPolicy: OrderedReady
      startupProbe:
        enabled: false
        initialDelaySeconds: 180
        periodSeconds: 45
        timeoutSeconds: 30
        successThreshold: 1
        failureThreshold: 6
      livenessProbe:
        enabled: true
        initialDelaySeconds: 180
        periodSeconds: 45
        timeoutSeconds: 30
        successThreshold: 1
        failureThreshold: 6
      readinessProbe:
        enabled: true
        initialDelaySeconds: 180
        periodSeconds: 45
        timeoutSeconds: 45
        successThreshold: 1
        failureThreshold: 6
      containerPorts:
        http: 8086
        rpc: 8088
      service:
        type: LoadBalancer
        port: 8086
        rpcPort: 8088
        externalIPs:
          - "${METALLB_INFLUXDB_IP}"
        externalTrafficPolicy: Local
    ingress:
      enabled: true
      tls: true
      pathType: ImplementationSpecific
      hostname: influxdb.${SECRET_DOMAIN}
      path: /
      annotations:
        traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
    collectd:
      enabled: false
      service:
        type: ClusterIP
        port: 25826
        nodePort: ""
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        clusterIP: ""
        annotations: {}
    metrics:
      enabled: false
      service:
        type: ClusterIP
        port: 9122
        nodePort: ""
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        clusterIP: ""
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "{{ .Values.metrics.service.port }}"
          prometheus.io/path: "/metrics"
        externalTrafficPolicy: Cluster
        extraPorts: []
        sessionAffinity: None
        sessionAffinityConfig: {}
      serviceMonitor:
        enabled: false
        namespace: ""
        interval: ""
        scrapeTimeout: ""
        relabelings: []
        metricRelabelings: []
        selector: {}
        honorLabels: false
    networkPolicy:
      enabled: false
      allowExternal: true
    persistence:
      enabled: true
      existingClaim: "influxdb-data"
      storageClass: "longhorn"
      accessModes:
        - ReadWriteOnce
    serviceAccount:
      create: true
      name: ""
      automountServiceAccountToken: true
      annotations: {}
    psp:
      create: false
    rbac:
      create: false
    volumePermissions:
      enabled: false
      image:
        registry: docker.io
        repository: bitnami/bitnami-shell
        tag: 11-debian-11-r37
        digest: ""
        pullPolicy: IfNotPresent
        pullSecrets: []
      securityContext:
        runAsUser: 0
    backup:
      enabled: false
      directory: "/backups"
      retentionDays: 10
      cronjob:
        schedule: "0 2 * * *"
        historyLimit: 1
        podAnnotations: {}
        securityContext:
          enabled: true
          fsGroup: 1001
          runAsUser: 1001
      podAffinityPreset: ""
      podAntiAffinityPreset: soft
      nodeAffinityPreset:
        type: ""
        key: ""
        values: []
      affinity: {}
      nodeSelector: {}
      tolerations: []
    config:
      reporting_disabled: false
      rpc: {}
      meta: {}
      data: {}
      coordinator: {}
      retention: {}
      shard_precreation: {}
      monitor: {}
      http: {}
      logging: {}
      subscriber: {}
      graphite: {}
      collectd: {}
      opentsdb:
        enabled: true
        bind-address: ":4242"
        database: "opentsdb"
        #retention-policy = ""
        #consistency-level = "one"
        tls-enabled: false
        log-point-errors: true
        batch-size: 1000
        batch-pending: 5
        batch-timeout: "1s"
      udp: {}
      continuous_queries: {}
      tls: {}
