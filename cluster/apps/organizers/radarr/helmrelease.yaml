---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: &app radarr
  namespace: organizers
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 0.1.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
  values:
    image:
      repository: ghcr.io/onedr0p/radarr-develop
      tag: 4.2.2.6503@sha256:4252feffee3058d739f63e8b4201ff55ca047db686a8ce587c1120c1964d987c
    env:
      TZ: "${TZ}"
    envFrom:
      - secretRef:
          name: *app
    service:
      main:
        ports:
          http:
            port: 7878
    ingress:
      main:
        enabled: true
        ingressClassName: traefik
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          hajimari.io/enable: "true"
          hajimari.io/icon: "filmstrip"
        hosts:
          - host: &host "{{ .Release.Name }}.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - secretName: &tls "${SECRET_CERT}"
            hosts:
              - *host
      api:
        enabled: true
        ingressClassName: "traefik"
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        hosts:
          - host: *host
            paths:
              - path: /api
                pathType: Prefix
        tls:
          - secretName: *tls
            hosts:
              - *host
    probes:
      liveness:
        enabled: true
        custom: true
        spec:
          exec:
            command:
              - /usr/bin/env
              - bash
              - -c
              - curl --fail localhost:7878/api/v3/system/status?apiKey=`IFS=\> && while
                read -d \< E C; do if [[ $E = "ApiKey" ]]; then echo $C; fi; done < /config/config.xml`
          failureThreshold: 5
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
  # podAnnotations:
    # backup.velero.io/backup-volumes: config
    persistence:
      config:
        enabled: true
        existingClaim: radarr-config-v1
      media:
        enabled: true
        type: nfs
        server: "${NFS_SERVER}"
        path: ${NFS_MEDIA}
        mountPath: /media
        readOnly: false
      download:
        enabled: true
        type: nfs
        server: "${NFS_SERVER}"
        path: ${NFS_DOWNLOAD}
        mountPath: /download
        readOnly: false

    podSecurityContext:
      supplementalGroups:
        - 1001
        - 100
      runAsUser: 568
      runAsGroup: 568
      fsGroup: 568
      fsGroupChangePolicy: OnRootMismatch
    resources:
      requests:
        memory: 350Mi
        cpu: 250m
      limits:
        memory: 2000Mi
