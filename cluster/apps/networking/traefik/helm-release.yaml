---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: traefik
  namespace: traefik
  labels:
    app: traefik
spec:
  chart:
    spec:
      chart: traefik
      version: 11.x
      sourceRef:
        kind: HelmRepository
        name: traefik
        namespace: flux-system
  interval: 15m
  timeout: 5m
  releaseName: traefik
  install:
    createNamespace: true
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
  dependsOn:
    - name: cert-manager
      namespace: kube-system
    - name: longhorn
      namespace: longhorn-system
# valuesFrom:
  # - kind: ConfigMap
    # name: traefik-helm-chart-value-overrides
    # valuesKey: values.yaml # This is the default, but best to be explicit for clarity
  values:
    image:
      name: traefik
      tag: ""
      pullPolicy: IfNotPresent
    deployment:
      enabled: true
      kind: Deployment
      replicas: 1
      terminationGracePeriodSeconds: 60
      minReadySeconds: 0
      annotations: {}
      labels: {}
      podAnnotations: {}
      podLabels: {}
      additionalContainers: []
      additionalVolumes: []
      initContainers:
        - name: volume-permissions
          image: busybox:1.31.1
          command: ["sh", "-c", "chmod -Rv 600 /data/*"]
          volumeMounts:
            - name: data
              mountPath: /data
      shareProcessNamespace: true
      imagePullSecrets: []
      lifecycle: {}
    podDisruptionBudget:
      enabled: false
      # maxUnavailable: 1
      # maxUnavailable: 33%
      # minAvailable: 0
      # minAvailable: 25%
    ingressClass:
      enabled: false
      isDefaultClass: false
      fallbackApiVersion: ""

    # Activate Pilot integration
    pilot:
      enabled: false
      token: ""
      # Toggle Pilot Dashboard
      # dashboard: false

    experimental:
      http3:
        enabled: false
      plugins:
        enabled: false
      kubernetesGateway:
        enabled: false
        gateway:
          enabled: true
        # certificate:
        #   group: "core"
        #   kind: "Secret"
        #   name: "mysecret"
        # By default, Gateway would be created to the Namespace you are deploying Traefik to.
        # You may create that Gateway in another namespace, setting its name below:
        # namespace: default

    ingressRoute:
      dashboard:
        enabled: true
        annotations: {}
        labels: {}
        entryPoints: ["traefik"]

    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1

    # Customize liveness and readiness probe values.
    readinessProbe:
      failureThreshold: 1
      initialDelaySeconds: 2
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2

    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 2
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2

    #
    # Configure providers
    #
    providers:
      kubernetesCRD:
        enabled: true
        allowCrossNamespace: true
        allowExternalNameServices: false
        allowEmptyServices: true
        ingressClass: traefik
        # labelSelector: environment=production,method=traefik
        namespaces: []
          # - "default"

      kubernetesIngress:
        enabled: true
        allowExternalNameServices: false
        allowEmptyServices: true
        ingressClass: traefik
        # labelSelector: environment=production,method=traefik
        namespaces: []
          # - "default"
        # IP used for Kubernetes Ingress endpoints
        publishedService:
          enabled: false
          # Published Kubernetes Service to copy status from. Format: namespace/servicename
          # By default this Traefik service
          # pathOverride: ""

    #
    # Add volumes to the traefik pod. The volume name will be passed to tpl.
    # This can be used to mount a cert pair or a configmap that holds a config.toml file.
    # After the volume has been mounted, add the configs into traefik by using the `additionalArguments` list below, eg:
    # additionalArguments:
    # - "--providers.file.filename=/config/dynamic.toml"
    # - "--ping"
    # - "--ping.entrypoint=web"
    volumes: []
    # - name: public-cert
    #   mountPath: "/certs"
    #   type: secret
    # - name: '{{ printf "%s-configs" .Release.Name }}'
    #   mountPath: "/config"
    #   type: configMap

    # Additional volumeMounts to add to the Traefik container
    additionalVolumeMounts:
      # For instance when using a logshipper for access logs
      - name: traefik-logs
        mountPath: /var/log/traefik

    logs:
      general:
        # By default, the level is set to ERROR. Alternative logging levels are DEBUG, PANIC, FATAL, ERROR, WARN, and INFO.
        level: ERROR
      access:
        enabled: true
        # By default, logs are written using the Common Log Format (CLF).
        # To write logs in JSON, use json in the format option.
        # If the given format is unsupported, the default (CLF) is used instead.
        # format: json
        # To write the logs in an asynchronous fashion, specify a bufferingSize option.
        # This option represents the number of log lines Traefik will keep in memory before writing
        # them to the selected output. In some cases, this option can greatly help performances.
        # bufferingSize: 100
        # Filtering https://docs.traefik.io/observability/access-logs/#filtering
        filters: {}
          # statuscodes: "200,300-302"
          # retryattempts: true
          # minduration: 10ms
        # Fields
        # https://docs.traefik.io/observability/access-logs/#limiting-the-fieldsincluding-headers
        fields:
          general:
            defaultmode: keep
            names: {}
              # Examples:
              # ClientUsername: drop
          headers:
            defaultmode: drop
            names: {}
              # Examples:
              # User-Agent: redact
              # Authorization: drop
              # Content-Type: keep

    metrics:
      # datadog:
      #   address: 127.0.0.1:8125
      # influxdb:
      #   address: localhost:8089
      #   protocol: udp
      prometheus:
        entryPoint: metrics
        addRoutersLabels: true
      # statsd:
      #   address: localhost:8125

    tracing: {}
      # instana:
      #   localAgentHost: 127.0.0.1
      #   localAgentPort: 42699
      #   logLevel: info
      #   enableAutoProfile: true
      # datadog:
      #   localAgentHostPort: 127.0.0.1:8126
      #   debug: false
      #   globalTag: ""
      #   prioritySampling: false
      # jaeger:
      #   samplingServerURL: http://localhost:5778/sampling
      #   samplingType: const
      #   samplingParam: 1.0
      #   localAgentHostPort: 127.0.0.1:6831
      #   gen128Bit: false
      #   propagation: jaeger
      #   traceContextHeaderName: uber-trace-id
      #   disableAttemptReconnecting: true
      #   collector:
      #      endpoint: ""
      #      user: ""
      #      password: ""
      # zipkin:
      #   httpEndpoint: http://localhost:9411/api/v2/spans
      #   sameSpan: false
      #   id128Bit: true
      #   sampleRate: 1.0
      # haystack:
      #   localAgentHost: 127.0.0.1
      #   localAgentPort: 35000
      #   globalTag: ""
      #   traceIDHeaderName: ""
      #   parentIDHeaderName: ""
      #   spanIDHeaderName: ""
      #   baggagePrefixHeaderName: ""
      # elastic:
      #   serverURL: http://localhost:8200
      #   secretToken: ""
      #   serviceEnvironment: ""

    globalArguments:
      - "--global.checknewversion"
      - "--global.sendanonymoususage"

    #
    # Configure Traefik static configuration
    # Additional arguments to be passed at Traefik's binary
    # All available options available on https://docs.traefik.io/reference/static-configuration/cli/
    ## Use curly braces to pass values: `helm install --set="additionalArguments={--providers.kubernetesingress.ingressclass=traefik-internal,--log.level=DEBUG}"`
    additionalArguments:
    #  - "--providers.kubernetesingress.ingressclass=traefik-internal"
    #  - "--log.level=DEBUG"
      - "--entryPoints.web.proxyProtocol.insecure"
      - "--entryPoints.web.forwardedHeaders.insecure"
      - "--providers.kubernetesingress.ingressendpoint.ip=${METALLB_INGRESS_ADDR}"
      - "--providers.kubernetescrd.allowexternalnameservices=true"

    # Environment variables to be passed to Traefik's binary
    env: []
    # - name: SOME_VAR
    #   value: some-var-value
    # - name: SOME_VAR_FROM_CONFIG_MAP
    #   valueFrom:
    #     configMapRef:
    #       name: configmap-name
    #       key: config-key
    # - name: SOME_SECRET
    #   valueFrom:
    #     secretKeyRef:
    #       name: secret-name
    #       key: secret-key

    envFrom: []
    # - configMapRef:
    #     name: config-map-name
    # - secretRef:
    #     name: secret-name

    # Configure ports
    ports:
      # The name of this one can't be changed as it is used for the readiness and
      # liveness probes, but you can adjust its config to your liking
      traefik:
        port: 9000
        # Use hostPort if set.
        # hostPort: 9000
        #
        # Use hostIP if set. If not set, Kubernetes will default to 0.0.0.0, which
        # means it's listening on all your interfaces and all your IPs. You may want
        # to set this value if you need traefik to listen on specific interface
        # only.
        # hostIP: 192.168.100.10

        # Override the liveness/readiness port. This is useful to integrate traefik
        # with an external Load Balancer that performs healthchecks.
        # healthchecksPort: 9000

        # Override the liveness/readiness scheme. Useful for getting ping to
        # respond on websecure entryPoint.
        # healthchecksScheme: HTTPS

        # Defines whether the port is exposed if service.type is LoadBalancer or
        # NodePort.
        #
        # You SHOULD NOT expose the traefik port on production deployments.
        # If you want to access it from outside of your cluster,
        # use `kubectl port-forward` or create a secure ingress
        expose: false
        # The exposed port for this service
        exposedPort: 9000
        # The port protocol (TCP/UDP)
        protocol: TCP
      web:
        port: 8000
        expose: true
        exposedPort: 80
        protocol: TCP
        redirectTo: websecure
      websecure:
        port: 8443
        # hostPort: 8443
        expose: true
        exposedPort: 443
        # The port protocol (TCP/UDP)
        protocol: TCP
        # nodePort: 32443
        # Enable HTTP/3.
        # Requires enabling experimental http3 feature and tls.
        # Note that you cannot have a UDP entrypoint with the same port.
        # http3: true
        # Set TLS at the entrypoint
        # https://doc.traefik.io/traefik/routing/entrypoints/#tls
        tls:
          enabled: false
          # this is the name of a TLSOption definition
          options: ""
          certResolver: ""
          domains: []
          # - main: example.com
          #   sans:
          #     - foo.example.com
          #     - bar.example.com
      rdp:
        port: 3389
        expose: true
        exposedPort: 3389
        protocol: TCP
        tls:
          enabled: false
      ssh:
        port: 23
        expose: true
        exposedPort: 23
        protocol: TCP
        tls:
          enabled: false
      metrics:
        port: 9101
        expose: true
        exposedPort: 9101
        protocol: TCP
        #
        # One can apply Middlewares on an entrypoint
        # https://doc.traefik.io/traefik/middlewares/overview/
        # https://doc.traefik.io/traefik/routing/entrypoints/#middlewares
        # /!\ It introduces here a link between your static configuration and your dynamic configuration /!\
        # It follows the provider naming convention: https://doc.traefik.io/traefik/providers/overview/#provider-namespace
        # middlewares:
        #   - namespace-name1@kubernetescrd
        #   - namespace-name2@kubernetescrd
        middlewares: []

    # TLS Options are created as TLSOption CRDs
    # https://doc.traefik.io/traefik/https/tls/#tls-options
    # Example:
    # tlsOptions:
    #   default:
    #     sniStrict: true
    #     preferServerCipherSuites: true
    #   foobar:
    #     curvePreferences:
    #       - CurveP521
    #       - CurveP384
    tlsOptions: {}

    # TLS Store are created as TLSStore CRDs. This is useful if you want to set a default certificate
    # https://doc.traefik.io/traefik/https/tls/#default-certificate
    # Example:
    # tlsStore:
    #   default:
    #     defaultCertificate:
    #       secretName: tls-cert
    tlsStore: {}

    # Options for the main traefik service, where the entrypoints traffic comes
    # from.
    service:
      enabled: true
      type: LoadBalancer
      # Additional annotations applied to both TCP and UDP services (e.g. for cloud provider specific config)
      annotations: {}
      # Additional annotations for TCP service only
      annotationsTCP: {}
      # Additional annotations for UDP service only
      annotationsUDP: {}
      # Additional service labels (e.g. for filtering Service by custom labels)
      labels: {}
      # Additional entries here will be added to the service spec.
      # Cannot contain type, selector or ports entries.
      spec:
        externalTrafficPolicy: Local
        externalIPs:
          - ${METALLB_INGRESS_ADDR}
        # loadBalancerIP: "1.2.3.4"
        # clusterIP: "2.3.4.5"
      loadBalancerSourceRanges: []
        # - 192.168.0.1/32
        # - 172.16.0.0/16
      externalIPs: []
        # - 1.2.3.4
      # One of SingleStack, PreferDualStack, or RequireDualStack.
      # ipFamilyPolicy: SingleStack
      # List of IP families (e.g. IPv4 and/or IPv6).
      # ref: https://kubernetes.io/docs/concepts/services-networking/dual-stack/#services
      # ipFamilies:
      #   - IPv4
      #   - IPv6

    ## Create HorizontalPodAutoscaler object.
    ##
    autoscaling:
      enabled: false
    #   minReplicas: 1
    #   maxReplicas: 10
    #   metrics:
    #   - type: Resource
    #     resource:
    #       name: cpu
    #       targetAverageUtilization: 60
    #   - type: Resource
    #     resource:
    #       name: memory
    #       targetAverageUtilization: 60

    # Enable persistence using Persistent Volume Claims
    # ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    # After the pvc has been mounted, add the configs into traefik by using the `additionalArguments` list below, eg:
    # additionalArguments:
    # - "--certificatesresolvers.le.acme.storage=/data/acme.json"
    # It will persist TLS certificates.
    persistence:
      enabled: true
      name: data
      existingClaim: "traefik-data-v1"
      accessMode: ReadWriteOnce
      size: 128Mi
      storageClass: "longhorn"
      path: /data
      annotations: {}
      # subPath: "" # only mount a subpath of the Volume into the pod

    certResolvers: {}
    #   letsencrypt:
    #     # for challenge options cf. https://doc.traefik.io/traefik/https/acme/
    #     email: email@example.com
    #     dnsChallenge:
    #       # also add the provider's required configuration under env
    #       # or expand then from secrets/configmaps with envfrom
    #       # cf. https://doc.traefik.io/traefik/https/acme/#providers
    #       provider: digitalocean
    #       # add futher options for the dns challenge as needed
    #       # cf. https://doc.traefik.io/traefik/https/acme/#dnschallenge
    #       delayBeforeCheck: 30
    #       resolvers:
    #         - 1.1.1.1
    #         - 8.8.8.8
    #     tlsChallenge: true
    #     httpChallenge:
    #       entryPoint: "web"
    #     # match the path to persistence
    #     storage: /data/acme.json

    # If hostNetwork is true, runs traefik in the host network namespace
    # To prevent unschedulabel pods due to port collisions, if hostNetwork=true
    # and replicas>1, a pod anti-affinity is recommended and will be set if the
    # affinity is left as default.
    hostNetwork: false

    # Whether Role Based Access Control objects like roles and rolebindings should be created
    rbac:
      enabled: true

      # If set to false, installs ClusterRole and ClusterRoleBinding so Traefik can be used across namespaces.
      # If set to true, installs namespace-specific Role and RoleBinding and requires provider configuration be set to that same namespace
      namespaced: false

    # Enable to create a PodSecurityPolicy and assign it to the Service Account via RoleBinding or ClusterRoleBinding
    podSecurityPolicy:
      enabled: false

    # The service account the pods will use to interact with the Kubernetes API
    serviceAccount:
      # If set, an existing service account is used
      # If not set, a service account is created automatically using the fullname template
      name: ""

    # Additional serviceAccount annotations (e.g. for oidc authentication)
    serviceAccountAnnotations: {}

    resources: {}
      # requests:
      #   cpu: "100m"
      #   memory: "50Mi"
      # limits:
      #   cpu: "300m"
      #   memory: "150Mi"
    affinity: {}
    # # This example pod anti-affinity forces the scheduler to put traefik pods
    # # on nodes where no other traefik pods are scheduled.
    # # It should be used when hostNetwork: true to prevent port conflicts
    #   podAntiAffinity:
    #     requiredDuringSchedulingIgnoredDuringExecution:
    #       - labelSelector:
    #           matchExpressions:
    #             - key: app.kubernetes.io/name
    #               operator: In
    #               values:
    #                 - {{ template "traefik.name" . }}
    #         topologyKey: kubernetes.io/hostname
    nodeSelector: {}
    tolerations: []

    # Pods can have priority.
    # Priority indicates the importance of a Pod relative to other Pods.
    priorityClassName: ""

    # Set the container security context
    # To run the container with ports below 1024 this will need to be adjust to run as root
    securityContext:
      capabilities:
        add:
          - NET_BIND_SERVICE
      readOnlyRootFilesystem: true
      runAsGroup: 65532
      runAsNonRoot: false
      runAsUser: 0

    podSecurityContext:
      fsGroup: 65532

    #
    # Extra objects to deploy (value evaluated as a template)
    #
    # In some cases, it can avoid the need for additional, extended or adhoc deployments.
    # See #595 for more details and traefik/tests/extra.yaml for example.
    extraObjects: []
