# yamllint disable
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 40.0.2
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
      interval: 5m
  install:
    createNamespace: true
    remediation:
      retries: 3
  values:
    fullnameOverride: kps
    nameOverride: kps
    alertmanager:
      config:
        global:
          resolve_timeout: 8h
        receivers:
          - name: "null"
          - name: "discord_webhook"
            webhook_configs:
              - url: "http://alertmanager-discord.observability.svc.cluster.local:9094"
          - name: "discord"
            slack_configs:
              - channel: "prometheus"
                icon_url: https://avatars3.githubusercontent.com/u/3380462
                username: "Prometheus"
                send_resolved: true
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }}{{ else }}{{ .CommonLabels.alertname }}{{ end }}
                text: >-
                  {{ range .Alerts -}}
                    **Alert:** {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
                  **Description:** {{ if ne .Annotations.description ""}}{{ .Annotations.description }}{{else}}N/A{{ end }}
                  **Details:**
                    {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}
        route:
          group_by: ["alertname", "job"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 12h
          receiver: "discord_webhook"
          routes:
            - receiver: "null"
              match:
                alertname: Watchdog
            - receiver: "null"
              match:
                alertname: InfoInhibitor
            - receiver: discord
              match_re:
                severity: critical
              continue: true
        inhibit_rules:
          - source_match:
              severity: "critical"
            target_match:
              severity: warning
            equal: ["alertname", "namespace"]
      ingress:
        enabled: true
        ingressClassName: "traefik"
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
        hosts:
          - &host "alert-manager.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - *host
            secretName: "${SECRET_CERT}"
      alertmanagerSpec:
        replicas: 3
        storage:
          volumeClaimTemplate:
            metadata:
              labels:
                snapshot.home.arpa/enabled: "true"
            spec:
             storageClassName: "longhorn"
             resources:
               requests:
                 storage: 10Gi
    kube-state-metrics:
      metricLabelsAllowlist:
        - "persistentvolumeclaims=[*]"
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    coreDns:
      enabled: true
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: true
      endpoints:
        - 10.0.102.51
        - 10.0.102.52
        - 10.0.102.53
    kubeScheduler:
      enabled: true
      endpoints:
        - 10.0.102.51
        - 10.0.102.52
        - 10.0.102.53
    kubeProxy:
      enabled: true
      endpoints:
        - 10.0.102.51
        - 10.0.102.52
        - 10.0.102.53
    kubeEtcd:
      enabled: true
      endpoints:
        - 10.0.102.51
        - 10.0.102.52
        - 10.0.102.53
      service:
        enabled: true
        port: 2381
        targetPort: 2381
    kubeStateMetrics:
      enabled: true
    prometheus:
      ingress:
        enabled: true
        ingressClassName: "traefik"
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
        hosts:
          - "prometheus.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - "prometheus.${SECRET_DOMAIN}"
            secretName: ${SECRET_CERT}
      prometheusSpec:
        replicas: 3
        replicaExternalLabelName: __replica__
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 6h
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            metadata:
              labels:
                snapshot.home.arpa/enabled: "true"
            spec:
              storageClassName: "longhorn"
              resources:
                requests:
                  storage: 50Gi
        resources:
         requests:
           cpu: 500m
           memory: 2000Mi
         limits:
           memory: 8000Mi
        additionalScrapeConfigs:
          - job_name: traefik
            scrape_interval: 1m
            scrape_timeout: 10s
            honor_timestamps: true
            static_configs:
              - targets:
                  - "traefik.${SECRET_DOMAIN}:9101"
          - job_name: speedtest
            scrape_interval: 60m
            scrape_timeout: 120s
            honor_timestamps: true
            static_configs:
              - targets:
                  - "speedtest.${SECRET_DOMAIN}"
  valuesFrom:
    - kind: Secret
      name: discord-webhook
      valuesKey: ALERT_MANAGER_DISCORD_WEBHOOK
      targetPath: alertmanager.config.global.slack_api_url
      optional: false
